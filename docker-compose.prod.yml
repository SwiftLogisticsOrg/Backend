version: '3.8'

services:
  # Infrastructure
  postgres:
    image: postgres:15-alpine
    container_name: swifttrack-postgres-prod
    environment:
      POSTGRES_DB: swifttrack
      POSTGRES_USER: swifttrack
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - swifttrack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U swifttrack"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongodb:
    image: mongo:7.0
    container_name: swifttrack-mongodb-prod
    environment:
      MONGO_INITDB_ROOT_USERNAME: swifttrack
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: swifttrack_orders
    ports:
      - "27017:27017"
    volumes:
      - mongodb_prod_data:/data/db
      - ./docker/mongodb/init.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - swifttrack-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: swifttrack-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    networks:
      - swifttrack-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: swifttrack-rabbitmq-prod
    environment:
      RABBITMQ_DEFAULT_USER: swifttrack
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_prod_data:/var/lib/rabbitmq
    networks:
      - swifttrack-network
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5

  # Services (Production)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: swifttrack-gateway-prod
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - swifttrack-network
    restart: unless-stopped

  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: swifttrack-user-service-prod
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: postgresql://swifttrack:${POSTGRES_PASSWORD}@postgres:5432/swifttrack_users
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      RABBITMQ_URL: amqp://swifttrack:${RABBITMQ_PASSWORD}@rabbitmq:5672
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - swifttrack-network
    restart: unless-stopped

  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: swifttrack-order-service-prod
    environment:
      NODE_ENV: production
      PORT: 3003
      MONGODB_URI: mongodb://swifttrack:${MONGO_PASSWORD}@mongodb:27017/swifttrack_orders
      RABBITMQ_URL: amqp://swifttrack:${RABBITMQ_PASSWORD}@rabbitmq:5672
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - swifttrack-network
    restart: unless-stopped

  logistics-service:
    build:
      context: ./services/logistics-service
      dockerfile: Dockerfile
    container_name: swifttrack-logistics-service-prod
    environment:
      NODE_ENV: production
      PORT: 3004
      DATABASE_URL: postgresql://swifttrack:${POSTGRES_PASSWORD}@postgres:5432/swifttrack_logistics
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://swifttrack:${RABBITMQ_PASSWORD}@rabbitmq:5672
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - swifttrack-network
    restart: unless-stopped

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: swifttrack-notification-service-prod
    environment:
      NODE_ENV: production
      PORT: 3005
      JWT_SECRET: ${JWT_SECRET}
      RABBITMQ_URL: amqp://swifttrack:${RABBITMQ_PASSWORD}@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - swifttrack-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: swifttrack-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/certs:/etc/nginx/certs
    depends_on:
      - api-gateway
    networks:
      - swifttrack-network
    restart: unless-stopped

volumes:
  postgres_prod_data:
  mongodb_prod_data:
  redis_prod_data:
  rabbitmq_prod_data:

networks:
  swifttrack-network:
    driver: bridge
